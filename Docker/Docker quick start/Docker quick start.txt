Docker Quick Start Course:

########Installation and Configuration:##########
Create a docker repo in yum to pull the latest docker 

cd /etc/yum.repos.d
vim docker.repo
  ---> starting file
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerpproject.org/gpg
  ---> end file

  
yum update  # to pull docker epo to cache
yum install -y docker-engine
systemctl enable docker # creates a link to start our docker service
#output : Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service
systemctl start docker
docker --version
docker images # to check if we have any docker image installed


#to give access to any user to run docker

cd /var/run/
ls -al dock*
#output: docker.pid & docker.socket ...... to connect to docker we need to be able to connect to docker.socket file which has root as user and docker as groupp
cat /etc/group | grep docker
#output: docker:x:988:
#to add a user to group docker
usermod -a -G docker user   #user is name of the user
cat /etc/group | grep docker
#output: docker:x:988:user

=====================================================================================================================================================================

#########The Docker Hub##########
https://hub.docker.com/
docker id: kaabhi


=====================================================================================================================================================================

#########Base Images##############
docker images 
#to search docker repos from cmdln
docker search keyword  ##example## docker search centos
#pull a docker base image
docker pull reponame:Tag   ##exampple## docker pull hello-world
docker images
#run conntainers off docker with repoo name and tag
docker run reponame:tag  ##example## docker run hello-world:latest

#to get full output of what is contained in an image / container in json format
docker images
docker inspect imagename

=====================================================================================================================================================================

##########Running Containners#########

#whalesay is a image that docker uses to demonstrate how containers work
docker pull docker/whalesay
docker run docker/whalesay cowsay hello  #cowsay is an application whalesay has that displays what message is to be printed

#to check what all containers are running
docker ps
docker ps -a #gives list of alll docker containers that havve run in the past annd now stopped

#run a container in interactive mode(i) & connected to terminal(t) & diconnected mode(d) and with what command to run when the container starts(/bin/bash)
docker run -it centos:latest /bin/bash

yum install elinks #to run a text based browser from terminal
elinks http://ip

#naming convention set for container
docker run -d --name=MyWeb1 nginx:latest 

=====================================================================================================================================================================

#############Container Lifecycle###########
docker run -d --name==Lifecycle1 nginx:latest
#attaching to a running container
docker attach Lifecycle1
#docker exec helps to execute something on a running container without effecting the actual process
docker exec -it Lifecycle1 /bin/bash
#to stop/start/restart a container
docker stop/start/restart Lifecycle1

=================================================================================================================================================================================

#############Image & Container Management##############
docker images
#deleting docker images
docker rmi centos:centos6  #docker rmi image:tag
docker rmi -f imagename   #to force deletion oof the image

docker ps -a 
#deleting containers
docker rm containername/id


docker ps -a -q  #gives just the ids of all stopped coontainers on the system

#to delete all stopped containers
docker rm `docker ps -a -q`

========================================================================================================================================================================================

##############Redirection Ports & Volumes###########
docker run -d --name=web1 -P nginx:latest  # -P here tells to map the continer exposed port to map with a random port available between 32768 & 65000 oon our host
docker ps
docker port web1 $CONTAINERPORT   #both the docker ps and beside command can be used to find the port on which all localhost can access the container

#Binding to a specific port use -p 
docker run -d -p 8080:80 --name=web2 nginx:latest

#Mount directories from underlying host to a container 
docker run -d -p 8080:80 --name=web3 -v /mnt/data nginx:latest  #creates a mount point in /mnt/data

##Example##
#create a directory
mkdir www
cd www
vim index.html
---------> Starting file
<HTML>
<HEAD></HEAD>
<HR/>
THIS IS A TEST HTML PAGE
<HR/>
</BODY>
</HTML>
----------->END FILE	
#default location for index.html file in nginx installation will be /usr/share/nginx/html/index.html
#load the created index.html into container
docker run -d -p 8080:80 --name=web4 -v /home/user/www:/usr/share/nginx/html nginx:latest 

=====================================================================================================================================================================

################Docker File########################

#creating our own base image
#create a dockerfile
vim Dockerfile1
---------->Starting file
FROM debian:stable
MAINTAINER kaabhi <ka.abhishek20@gmail.com>

RUN apt-get update
RUN apt-get upgrade
RUN apt-get install telnet
----------> End file

#Build a dockerfile
docker build -t kaabhi/myapache . # '.' denotes that it builds from the pwd

#each step in docker file will be a different layer in the image. Cobine steps to reduce steps & space required for build
vim Dockerfile2
---------->Starting file
FROM debian:stable
MAINTAINER kaabhi <ka.abhishek20@gmail.com>

RUN apt-get update && apt-get upgrade && apt-get install tellnet apache2 elinks openssh-server
----------> End file

#set a env variablue inside a container
---------->Starting file
FROM debian:stable
MAINTAINER kaabhi <ka.abhishek20@gmail.com>

RUN apt-get update && apt-get upgrade && apt-get install tellnet apache2 elinks openssh-server

ENV MYVALUE my-value
----------> End file
docker build -t kaabhi/myapache .
docker run -it kaabhi/myapachhe:latest /bin/bash
##Inside container
echo $MYVALUUE
#Output: my-value

#difference between RUN & CMD
##CMD is a command that runs innside a container after it is instantiated
##RUN is a command that runs while builldinng the image

#CMD ["command","parameter","parameter2"]  ##Example## CMD ["/usr/sbin/apache2ctl","-D","FOREGROUND"]  #Runs the command not in daemon mode (-D) & in foreground


=====================================================================================================================================================================
######More content on Docker deep dive##########